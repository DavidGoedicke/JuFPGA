module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  sig result [5][24];          // result for all operations
  sig result_out [24];         // result for output
  
  encoder enc (#WIDTH(5));
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    result[1][8:0] = io_dip[0];          // match LEDs to switches
    result[1][16:8] = io_dip[1];
    
    enc.in = io_button;
    
    result[2] = io_dip[0] + io_dip[1];   // binary addition
    result[3] = io_dip[0] - io_dip[1];   // binary subtraction
    result[4] = io_dip[0] * io_dip[1];   // binary multiplication
    
    result_out = result[enc.out];
    
    io_led = {result_out[23-:8], 
              result_out[15-:8], 
              result_out[7-:8]};        // match leds to result_out
  }
}