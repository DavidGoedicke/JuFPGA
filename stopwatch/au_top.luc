module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    button_conditioner start_stop_button;
    button_conditioner reset_button;
    stopwatch stopwatch;
    
    edge_detector start_stop_edge (#RISE(1), #FALL(0));
    
    .rst(rst) {
      multi_seven_seg seg_display;
    }
  }
  
  bin_to_dec digits (#DIGITS(4));

  always {
    usb_tx = usb_rx;
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    
    start_stop_button.in = io_button[1];
    reset_button.in      = io_button[3];
    
    start_stop_edge.in = start_stop_button.out;
    
    stopwatch.start_stop = start_stop_edge.out;
    stopwatch.rst = reset_button.out;
    
    digits.value = stopwatch.value;
    seg_display.values = digits.digits;
    seg_display.decimal = 4b0100;
    
    io_seg = ~seg_display.seg;
    io_sel = ~seg_display.sel;       
  }
}